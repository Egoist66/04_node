/**
 * Object containing all HTTP status codes as properties.
 * @readonly
 * @enum {number}
 */
export const httpStatusCodes = {
  /**
   * The request has succeeded.
   */
  OK: 200,
  /**
   * The request has been fulfilled and resulted in a new resource being created.
   */
  Created: 201,
  /**
   * The request has been accepted for processing, but the processing has not been completed.
   */
  Accepted: 202,
  /**
   * The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its origin, but is returning a modified version of the origin's response.
   */
  "Non-Authoritative Information": 203,
  /**
   * The server is returning no content.
   */
  "No Content": 204,
  /**
   * The server is returning reset content.
   */
  "Reset Content": 205,
  /**
   * The server is returning partial content.
   */
  "Partial Content": 206,
  /**
   * The status code is reserved for future use.
   */
  "Multi-Status": 207,
  /**
   * The members of a DAV binding have already been enumerated in a previous reply to this request, and are not being included again.
   */
  "Already Reported": 208,
  /**
   * The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.
   */
  IMUsed: 226,
  /**
   * The request has more than one possible response. The user agent or user should choose one of them. (There is no standardized way of choosing one of the responses, but HTML links to the possibilities are recommended so the user can pick.)
   */
  "Multiple Choices": 300,
  /**
   * The requested resource is available at one or more different URIs and the user agent can choose one of them. Unless it was a HEAD request, the response should include a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice may be performed automatically. However, this specification does not define any standard for such automatic selection.
   */
  "Moved Permanently": 301,
  /**
   * The requested resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client should continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.
   */
  Found: 302,
  /**
   * The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 status is primarily used for allowing the output of a POST to redirect the user agent to a selected resource, since the resulting entity can not be assumed to becacheable. In contrast to 302, the request method on the new URI is GET, regardless of the original request method. The values for the new URI are the same as the values for the original request.
   */
  "See Other": 303,
  /**
   * If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.
   */
  "Not Modified": 304,
  /**
   * The requested resource MUST be accessed through the proxy given by the Location field. The Location field gives the URI of the proxy. The recipient is expected to repeat this single request via the proxy. 305 responses MUST only be generated by origin servers.
   */
  "Use Proxy": 305,
  /**
   * The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.
   */
  "Temporary Redirect": 307,
  /**
   * The requested resource resides permanently under a different URI. This response is cacheable unless indicated otherwise.
   */
  "Permanent Redirect": 308,
  /**
   * The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.
   */
  "Bad Request": 400,
  /**
   * The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource.
   */
  Unauthorized: 401,
  /**
   * This code is reserved for future use.
   */
  "Payment Required": 402,
  /**
   * The server understood the request, but is refusing to authorize it. Authorization will not help and the request SHOULD NOT be repeated.
   */
  Forbidden: 403,
  /**
   * The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.
   */
  "Not Found": 404,
  /**
   * The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.
   */
  "Method Not Allowed": 405,
  /**
   * The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.
   */
  "Not Acceptable": 406,
  /**
   * This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the proxy. The proxy MUST return a Proxy-Authenticate header field containing a challenge applicable to the proxy for the requested resource.
   */
  "Proxy Authentication Required": 407,
  /**
   * The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.
   */
  "Request Timeout": 408,
  /**
   * The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request.
   */
  Conflict: 409,
  /**
   * The requested resource is no longer available at the server and no forwarding address is known. This condition is expected to be considered permanent. Clients with link editing capabilities SHOULD delete references to the Request-URI after user approval. If the server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 (Not Found) SHOULD be used instead. This response is cacheable unless indicated otherwise.
   */
  Gone: 410,
  /**
   * The server refuses to accept the request without a defined Content-Length. The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message-body in the request message.
   */
  "Length Required": 411,
  /**
   * The condition requested by the client was placed on the request method and the server is refusing to perform the request method with the requested semantics. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, other than with this error message.
   */
  "Precondition Failed": 412,
  /**
   * The server is refusing to process a request because the request entity is larger than the server is willing or able to process. The server MAY close the connection to prevent the client from continuing the request.
   */
  "Payload Too Large": 413,
  /**
   * The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a URI "black hole" of redirection (e.g., a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating the Request-URI.
   */
  "URI Too Long": 414,
  /**
   * The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.
   */
  "Unsupported Media Type": 415,
  /**
   * The request was well-formed but was unable to be processed due to semantic errors.
   */
  "Unprocessable Entity": 422,
  /**
   * The server is currently unable to handle the request due to a temporary overloading or maintenance of the server. The implication is that this is a temporary condition which will be alleviated after some delay.
   */
  "Service Unavailable": 503,
  /**
   * The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.
   */
  "Bad Gateway": 502,

}

  
